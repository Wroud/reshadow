// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel Vue should group props right 1`] = `
"import _mergeJSXProps from \\"@vue/babel-helper-vue-jsx-merge-props\\";
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/vue\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`Button {color: var(--c8_0)}\`
/*__css_end__*/
, \\"3399371458\\")]);
new Vue({
  el: \\"#app\\",
  render: h => styled((set([styled_c8], {
    \\"--c8_0\\": color
  }), h(\\"Button\\", map(\\"Button\\", _mergeJSXProps([{
    \\"class\\": \\"test\\",
    \\"attrs\\": {
      \\"size\\": \\"s\\",
      \\"bgcolor\\": \\"red\\",
      \\"$$style\\": styled.$$style
    }
  }, use({
    mod: \\"value\\"
  })])), [\\"Red\\"])))
});"
`;

exports[`babel Vue should pass classes 1`] = `
"import styled, { set, create, css, map, __css__ } from \\"@reshadow/vue\\";
import styles from './styles';
const styled_c8 = create([__css__(\`Button + Button {
    margin-left: 10px;
}\`
/*__css_end__*/
, \\"1736617416\\")]);
new Vue({
  el: \\"#app\\",
  render: h => styled((set([styled_c8]), h(\\"div\\", map(\\"div\\", {
    \\"attrs\\": {
      \\"className\\": styled.styles[\\"__div\\"]
    }
  }), [h(\\"Button\\", map(\\"Button\\", {
    \\"attrs\\": {
      \\"size\\": \\"s\\",
      \\"bgcolor\\": \\"red\\"
    }
  }), [\\"Red\\"]), h(\\"Button\\", map(\\"Button\\", {
    \\"attrs\\": {
      \\"size\\": \\"m\\",
      \\"bgcolor\\": \\"rebeccapurple\\"
    }
  }), [\\"Rebeccapurple\\"])])))
});"
`;

exports[`babel macro should NOT process a variable inside a comment 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`/* extremely insightful comment w/ \${type} */
.___button_1pj20_1 {
    color: red;
    height: var(--c8_1);
}\`
/*__css_end__*/
, \\"3720444030\\"), {
  \\"__button\\": \`___button_1pj20_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8, styles], {
  \\"--c8_0\\": type,
  \\"--c8_1\\": disabled
}), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel macro should NOT process a variable inside a comment, multiple comments 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import getHeight from './utils';
const styled_c8 = create([(__css__(\`/* extremely insightful comment w/ \${type} */
.___button_eg4jy_1 {
    /* yet another comment */
    color: red;
    height: var(--c8_1);
    /* height: \${someVar}; */
    background: var(--c8_3);
}\`
/*__css_end__*/
, \\"873612821\\"), {
  \\"__button\\": \`___button_eg4jy_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8, styles], {
  \\"--c8_0\\": type,
  \\"--c8_1\\": disabled,
  \\"--c8_2\\": getHeight(type),
  \\"--c8_3\\": color
}), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel macro should keep named imports 1`] = `
"import React from 'react';
import styled, { use, set, create, css, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_d2nb2_1 {
    color: red;
}\`
/*__css_end__*/
, \\"790506970\\"), {
  \\"__button\\": \`___button_d2nb2_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8, styles]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: 'normal'
})), \\"content\\")));

export default App;"
`;

exports[`babel macro should merge use 1`] = `
"import React from 'react';
import styled, { use, set, create, css, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_d2nb2_1 {
    color: red;
}\`
/*__css_end__*/
, \\"790506970\\"), {
  \\"__button\\": \`___button_d2nb2_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8, styles]), React.createElement(\\"button\\", map(\\"button\\", use({
  theme: 'normal',
  size: \\"s\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel macro should process module with macro 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_d2nb2_1 {
    color: red;
}\`
/*__css_end__*/
, \\"790506970\\"), {
  \\"__button\\": \`___button_d2nb2_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8, styles]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel macro should process styles with comments 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`/* extremely insightful comment */
.___button_xwari_1 {
    color: red;
}\`
/*__css_end__*/
, \\"2049633721\\"), {
  \\"__button\\": \`___button_xwari_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8, styles]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel postcss should inline styles from file but ignore them 1`] = `
"import React from 'react';
import styled, { css, __css__, set, create, use, map } from \\"@reshadow/core\\";

/*__reshadow-styles__:\\"./styles.css\\"*/
const { ...styles
} = (__css__(\`button {
    color: red;
}
\`
/*__css_end__*/
, \\"947371504\\"), {});
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel postcss should process styles and add them runtime 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_d2nb2_1 {
    color: red;
}\`
/*__css_end__*/
, \\"790506970\\"), {
  \\"__button\\": \`___button_d2nb2_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel postcss should process styles from file 1`] = `
"import React from 'react';
import styled, { css, __css__, set, create, use, map } from \\"@reshadow/core\\";

/*__reshadow-styles__:\\"./styles.css\\"*/
const { ...styles
} = (__css__(\`.___button_fo1gj_1 {
    color: red;
}
\`
/*__css_end__*/
, \\"947371504\\"), {
  \\"__button\\": \`___button_fo1gj_1\`
});
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel postcss should process styles with css 1`] = `
"import React from 'react';
import styled, { css, __css__, set, create, use, map } from \\"@reshadow/core\\";
const styles = (__css__(\`
    .___button_1cx4s_1 {
        color: red;
    }
\`
/*__css_end__*/
, \\"2958026746\\"), {
  \\"__button\\": \`___button_1cx4s_1\`
});
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel postcss should process styles with css local name 1`] = `
"import React from 'react';
import styled, { css as localCss, __css__, set, create, use, map } from \\"@reshadow/core\\";
const styles = (__css__(\`
    .___button_1cx4s_1 {
        color: red;
    }
\`
/*__css_end__*/
, \\"2958026746\\"), {
  \\"__button\\": \`___button_1cx4s_1\`
});
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel postcss should use cssnano 1`] = `
"import React from 'react';
import styled, { set, create, css, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_1n8fw_1{display:grid}\`
/*__css_end__*/
, \\"3581683094\\"), {
  \\"__button\\": \`___button_1n8fw_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}), \\"content\\")));

export default App;"
`;

exports[`babel postcss should use postcss-env 1`] = `
"import React from 'react';
import styled, { set, create, css, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_ltzzv_1 {
    -webkit-transition: 1s;
    transition: 1s;
}\`
/*__css_end__*/
, \\"1320178009\\"), {
  \\"__button\\": \`___button_ltzzv_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}), \\"content\\")));

export default App;"
`;

exports[`babel postcss should work with css-modules imports 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([(__css__(\`.___button_1vljt_1 {

    color: red;
}\`
/*__css_end__*/
, \\"4087429970\\"), {
  \\"title\\": \`_title_2ms0f_1\`,
  \\"__button\\": \`___button_1vljt_1 _title_2ms0f_1\`
})]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should keep the links to styles if they cant hoist 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import baseStyles from './styles';
const styled_c8 = create([baseStyles, __css__(\`button {
    color: red;
}\`
/*__css_end__*/
, \\"790506970\\")]);

const App = ({
  disabled,
  styles,
  type,
  color,
  bgcolor
}) => styled((set([styled_c8, styles]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should merge attributes well 1`] = `
"import React from 'react';
import styled, { use, set, create, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type,
  ...props
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  disabled: true,
  name: \\"button\\"
}, props, {
  type: \\"submit\\",
  autofocus: true,
  \\"aria-hidden\\": true
}, use({
  size: 's',
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should not transform tag with dot element that is not under \`use\` namespace 1`] = `
"import React from 'react';
import styled, { set, create, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(components.button, map(\\"components.button\\", {
  type: type,
  disabled: disabled
}), React.createElement(\\"span\\", {
  className: styled.styles[\\"__content\\"]
}, \\"content\\"))));

export default App;"
`;

exports[`babel should transform tag with dot element 1`] = `
"import React from 'react';
import styled, { use, set, create, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"div\\", map(\\"use--button\\", {
  type: type,
  disabled: disabled
}), React.createElement(\\"span\\", {
  className: styled.styles[\\"__use--content\\"]
}, \\"content\\"))));

export default App;"
`;

exports[`babel should transform tag with just "as" attribute 1`] = `
"import React from 'react';
import styled, { use, set, create, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}), React.createElement(\\"span\\", {
  className: styled.styles[\\"__content\\"]
}, \\"content\\"))));

export default App;"
`;

exports[`babel should transform tag with namespace 1`] = `
"import React from 'react';
import styled, { use, set, create, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"div\\", map(\\"use--button\\", {
  type: type,
  disabled: disabled
}), React.createElement(\\"span\\", {
  className: styled.styles[\\"__use--content\\"]
}, \\"content\\"))));

export default App;"
`;

exports[`babel should transform the code 1`] = `
"import React from 'react';
import styled, { set, create, use, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should transform the nested code 1`] = `
"import React from 'react';
import styled, { set, create, use, map } from \\"@reshadow/core\\";
import styles from './styles';
import styles2 from './styles2';
const styled_c8 = create([styles]);
const styled_12c = create([styles2]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), styled((set([styled_12c]), React.createElement(\\"div\\", {
  className: styled.styles[\\"__content\\"]
}, \\"content\\"))), React.createElement(\\"button\\", {
  className: styled.styles[\\"__button\\"]
}, \\"click\\"))));

export default App;"
`;

exports[`babel should transform with css-in-js code 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([__css__(\`button[disabled] {
    color: red;
}\`
/*__css_end__*/
, \\"1643207596\\")]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should transform with css-in-js code with styles 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button[disabled] {
    color: red;
}\`
/*__css_end__*/
, \\"1643207596\\")]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button[disabled] {
    color: var(--c8_0);
    background-color: var(--c8_1);
}\`
/*__css_end__*/
, \\"162741067\\")]);

const App = ({
  disabled,
  type,
  color,
  bgcolor
}) => styled((set([styled_c8], {
  \\"--c8_0\\": color,
  \\"--c8_1\\": bgcolor
}), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables and avoid duplication 1`] = `
"import React from 'react';
import styled, { set, create, css, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button {
    color: var(--c8_0);
    background-color: var(--c8_0);
}\`
/*__css_end__*/
, \\"3172944636\\")]);

const App = ({
  color
}) => styled((set([styled_c8], {
  \\"--c8_0\\": color
}), React.createElement(\\"button\\", {
  className: styled.styles[\\"__button\\"],
  style: styled.$$style
}, \\"content\\")));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables in nested elemnts 1`] = `
"import React from 'react';
import styled, { set, create, css, map, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([__css__(\`div {
    padding: 10px;
}\`
/*__css_end__*/
, \\"309716193\\")]);
const styled_12c = create([__css__(\`button[disabled] {
    color: var(--12c_0);
    background-color: var(--12c_1);
}\`
/*__css_end__*/
, \\"1529897259\\")]);

const App = ({
  disabled,
  type,
  color,
  bgcolor
}) => styled((set([styled_c8]), React.createElement(\\"div\\", {
  className: styled.styles[\\"__div\\"]
}, styled((set([styled_12c], {
  \\"--12c_0\\": color,
  \\"--12c_1\\": bgcolor
}), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}), \\"content\\"))))));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables in sibling nodes 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button[disabled] {
    color: var(--c8_0);
    background-color: var(--c8_1);
}\`
/*__css_end__*/
, \\"162741067\\")]);

const App = ({
  disabled,
  type,
  color,
  bgcolor
}) => styled((set([styled_c8], {
  \\"--c8_0\\": color,
  \\"--c8_1\\": bgcolor
}), React.createElement(React.Fragment, null, React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"normal\\"
})), \\"content\\"), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"action\\"
})), \\"content 2\\"))));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables with string inline style 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button[disabled] {
    color: var(--c8_0);
    background-color: var(--c8_1);
}\`
/*__css_end__*/
, \\"162741067\\")]);

const App = ({
  disabled,
  type,
  color,
  bgcolor
}) => styled((set([styled_c8], \`--c8_0:\${color};--c8_1:\${bgcolor};\`), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables with string inline style and avoid duplication 1`] = `
"import React from 'react';
import styled, { set, create, css, use, map, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button[disabled] {
    color: var(--c8_0);
    background-color: var(--c8_0);
}\`
/*__css_end__*/
, \\"1346164042\\")]);

const App = ({
  disabled,
  type,
  color
}) => styled((set([styled_c8], \`--c8_0:\${color};\`), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled,
  $$style: styled.$$style
}, use({
  theme: \\"normal\\"
})), \\"content\\")));

export default App;"
`;

exports[`babel should transform with css-in-js code with variables without overhead 1`] = `
"import React from 'react';
import styled, { set, create, css, __css__ } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles, __css__(\`button {
    color: var(--c8_0);
    background-color: var(--c8_1);
}\`
/*__css_end__*/
, \\"3608986237\\")]);

const App = ({
  color,
  bgcolor
}) => styled((set([styled_c8], {
  \\"--c8_0\\": color,
  \\"--c8_1\\": bgcolor
}), React.createElement(\\"button\\", {
  className: styled.styles[\\"__button\\"],
  style: styled.$$style
}, \\"content\\")));

export default App;"
`;

exports[`babel should use custom elementFallback 1`] = `
"import React from 'react';
import styled, { use, set, create, map } from \\"@reshadow/core\\";
import styles from './styles';
const styled_c8 = create([styles]);

const App = ({
  disabled,
  type
}) => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", {
  type: type,
  disabled: disabled
}), React.createElement(\\"span\\", {
  className: styled.styles[\\"__content\\"]
}, \\"content\\"))));

export default App;"
`;

exports[`babel should work with just spread 1`] = `
"import React from 'react';
import styled, { set, create, css, map, __css__ } from \\"@reshadow/core\\";
const styled_c8 = create([__css__(\`button {
    padding: 5px 10px;
}\`
/*__css_end__*/
, \\"1053722513\\")]);

const Button = props => styled((set([styled_c8]), React.createElement(\\"button\\", map(\\"button\\", props))));

export default Button;"
`;
